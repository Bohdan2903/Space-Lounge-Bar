{"version":3,"sources":["store/common/model.ts","store/common/reducer.tsx","store/createReducer.ts","api.ts","store/common/saga.tsx","store/rootSaga.tsx","store/configureStore.tsx","store/rootReducer.ts","Home/index.tsx","components/Employers.tsx","Employees/index.tsx","store/common/actions.tsx","App.tsx","index.tsx"],"names":["ActionType","initialState","handlers","commonReducer","lang","employers","SET_EMPLOYERS","state","action","payload","hasOwnProperty","type","instance","axios","create","baseURL","createApiCall","method","url","data","request","headers","cache","then","response","catch","error","changeLangSaga","takeLatest","GET_EMPLOYERS","put","console","log","fork","startSaga","all","commonSagas","sagaMiddleware","createSagaMiddleware","persistConfig","key","version","storage","localforage","blacklist","middleware","createBrowserHistory","applyMiddleware","persistedReducer","persistReducer","combineReducers","common","routerReducer","store","createStore","Index","className","to","EmployersBlock","letter","children","setActiveEmployers","activeEmployers","sortedActiveEmployees","useState","employees","setEmployees","toggleActiveEmployers","elem","name","target","index","dataset","birthday","isFind","some","item","value","activeItem","active","newEmployers","filteredEmployers","filter","newEmployees","reduce","acc","curr","Object","keys","length","map","id","push","useMemo","firstName","lastName","dob","fullName","data-index","htmlFor","data-birthday","checked","onChange","EmployeesPage","dispatch","useDispatch","requestEmployers","useSelector","setSortedActiveEmployees","useEffect","localStorage","getItem","parseActive","JSON","parse","sorterEmployers","sort","a","b","localeCompare","substr","alphabet","split","memoizedEmployees","indexOf","sortedGroups","employeesDob","month","Date","getMonth","sortedByMonth","setItem","stringify","Employers","currMonth","newMonth","setMonth","toLocaleDateString","App","exact","path","component","Home","Employees","persistor","persistStore","runSaga","run","rootSaga","configureStore","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.a7a8a8df.chunk.js","sourcesContent":["export enum ActionType { GET_EMPLOYERS = 'GET_EMPLOYERS', SET_EMPLOYERS = 'SET_EMPLOYERS' }\n","import { ActionType } from './model'\nimport { Action } from '../model'\nimport createReducer from '../createReducer'\n\nexport interface ICommonReducer {\n  lang: string\n  employers:any\n}\n\nconst defaultState: ICommonReducer = {\n  lang: 'en',\n  employers:null\n}\n\nexport const commonReducer = createReducer<ICommonReducer>(defaultState, {\n  [ActionType.SET_EMPLOYERS](state: ICommonReducer, action: Action<any>) {\n    return { ...state, employers: action.payload }\n  },\n})\n","import { Reducer } from 'redux'\nimport { Action } from './model'\n\nexport default function createReducer<S>(initialState: S, handlers: any): Reducer<S> {\n  const r = (state: S = initialState, action: Action<S>): S => {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    }\n    return state\n  }\n\n  return r as Reducer<S>\n}\n","import axios, { AxiosRequestConfig } from 'axios'\n\nconst instance = axios.create({\n  baseURL: 'https://yalantis-react-school-api.yalantis.com/api/task0',\n})\n\nexport const createApiCall = ({ method = 'GET', url = '', data = {} }: AxiosRequestConfig) => {\n  const headers: any = {\n    'Content-Type': 'application/json',\n    cache: 'no-cache',\n  }\n\n  return instance\n    .request({\n      method,\n      url,\n      data,\n      headers,\n    })\n    .then(response => response)\n    .catch(error => error.response)\n}\n","import { put, takeLatest, fork } from 'redux-saga/effects'\nimport { ActionType } from './model'\nimport { Action } from '../model'\nimport { createApiCall } from '../../api'\n\nexport function* changeLangSaga(): Generator {\n  yield takeLatest(ActionType.GET_EMPLOYERS, function* (action: Action) {\n    try {\n      const { data } = yield createApiCall({ url: `/users` })\n      yield put({ type: ActionType.SET_EMPLOYERS, payload: data })\n    }catch (e){\n      console.log(e)\n    }\n  })\n}\n// eslint-disable-next-line\nexport default [fork(changeLangSaga)]\n","import { all } from 'redux-saga/effects'\n\nimport commonSagas from './common/saga'\n\nexport default function* startSaga(): Generator {\n  yield all([...commonSagas])\n}\n","import { createBrowserHistory } from 'history'\nimport * as localforage from 'localforage'\nimport { applyMiddleware, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport { PersistConfig, persistReducer, persistStore } from 'redux-persist'\nimport rootReducer from './rootReducer'\nimport rootSaga from './rootSaga'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst persistConfig: PersistConfig<any> = {\n  key: 'root',\n  version: 1,\n  storage: localforage,\n  blacklist: [],\n}\n\nconst history = createBrowserHistory()\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet middleware = dev ? applyMiddleware(sagaMiddleware) : applyMiddleware(sagaMiddleware)\n\nif (dev) {\n  middleware = composeWithDevTools(middleware)\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history))\n\nexport const store = createStore(persistedReducer, middleware)\n\nexport default (): any => {\n  const persistor = persistStore(store)\n  return {\n    store,\n    persistor,\n    runSaga: sagaMiddleware.run(rootSaga),\n  }\n}\n\nexport { history }\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import { History } from 'history'\nimport { combineReducers } from 'redux'\nimport { routerReducer, RouterState } from 'react-router-redux'\nimport { commonReducer, ICommonReducer } from './common/reducer'\n\nexport interface RootState {\n  common: ICommonReducer\n  routerReducer: RouterState\n}\n\nexport default (history: History): any =>\n  combineReducers({\n    common: commonReducer,\n    routerReducer,\n  })\n","import { Link } from 'react-router-dom'\n\nconst Index = () => (\n  <div className={'wrapper'}>\n    <h1>Home</h1>\n    <p>Welcome home!</p>\n    <Link to=\"/employees\">Go to employees page</Link>\n  </div>\n)\n\nexport default Index\n","import { useMemo } from 'react'\nimport { useEffect, useState } from 'react'\n\n\ninterface Employers {\n  children?: []\n  letter: string\n  setActiveEmployers: any\n  activeEmployers: any,\n  sortedActiveEmployees?: any\n}\n\nconst EmployersBlock = ({\n                          letter,\n                          children,\n                          setActiveEmployers,\n                          activeEmployers,\n                          sortedActiveEmployees,\n                        }: Employers) => {\n  const [employees, setEmployees] = useState(children)\n  const toggleActiveEmployers = (elem: any) => {\n    const name = elem.target.name\n    const index = elem.target.dataset.index\n    const birthday = elem.target.dataset.birthday\n    const isFind = activeEmployers?.some((item: any) => item.key === index)\n    if (elem.target.value === 'true') {\n      const activeItem = { key: index, name, birthday, active: true}\n      const newEmployers = [...activeEmployers, activeItem]\n      !isFind &&  setActiveEmployers(newEmployers)\n    }\n   else{\n     const filteredEmployers = activeEmployers.filter((item: any) => item.key !== index)\n     setActiveEmployers(filteredEmployers)\n   }\n  }\n\n  const newEmployees = employees?.reduce((acc: any, curr: any) => {\n      if (Object.keys(sortedActiveEmployees)?.length > 0) {\n        Object.keys(sortedActiveEmployees)?.map((item): any => {\n          if (sortedActiveEmployees[item].children?.some((elem: any) => elem.key === curr.id)) {\n            acc[curr] = { ...curr, active: true }\n          } else {\n            acc[curr] = { ...curr}\n          }\n        })\n      } else {\n        acc[curr] = { ...curr,active: false }\n      }\n      acc.push(acc[curr])\n      return acc\n    }, [])\n\n  useMemo(() => setEmployees(newEmployees), [activeEmployers, sortedActiveEmployees])\n\n  return (\n    <div key={letter} className={'employer-info-wrapper'}>\n      <h2>{letter}</h2>\n      {employees?.map(({ id, firstName, lastName, dob, active }) => {\n        const fullName = `${lastName} ${firstName}`\n        return (\n          <div className={'employer-info'} key={id}>\n            <p data-index={id} className={active ? 'active' : ''}>{fullName}</p>\n            <label htmlFor=\"\">\n              <input type=\"radio\" value={'false'} data-index={id}\n                     name={fullName} data-birthday={dob}\n                     checked={!active}\n                     onChange={toggleActiveEmployers}\n              />Not active\n            </label>\n            <label htmlFor=\"\">\n              <input type=\"radio\" value={'true'} data-index={id}\n                     checked={active}\n                     data-birthday={dob} name={fullName}\n                     onChange={toggleActiveEmployers}/>\n              Active</label>\n          </div>\n        )\n      })}\n      {!employees || employees?.length <= 0 && (<h3>-</h3>)}\n    </div>\n  )\n}\nexport default EmployersBlock","import React, { useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { requestApiEmployees } from '../store/common/actions'\nimport { RootState } from '../store/configureStore'\nimport Employers from '../components/Employers'\n\nconst EmployeesPage = () => {\n  const dispatch = useDispatch()\n  const requestEmployers = useSelector((state: RootState) => state.common.employers)\n  const [activeEmployers, setActiveEmployers] = useState([])\n  const [sortedActiveEmployees, setSortedActiveEmployees] = useState({})\n\n  useEffect(() => {\n    dispatch(requestApiEmployees())\n  }, [])\n\n  useEffect(() => {\n    const active = localStorage.getItem('activeEmployers')\n    // @ts-ignore\n    if (active && Object.keys(active).length > 0) {\n      const parseActive = active && JSON.parse(active)\n      // @ts-ignore\n      return setSortedActiveEmployees(parseActive)\n    }\n  }, [])\n\n\n  const sorterEmployers = requestEmployers?.sort((a: any, b: any) => a.lastName.localeCompare(b.lastName))\n    .reduce((acc: any, curr: any) => {\n      acc[curr] = { letter: curr.lastName.substr(0, 1), ...curr }\n      acc.push(acc[curr])\n      return acc\n    }, [])\n  // @ts-ignore\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').reduce((acc, curr) => (acc[curr] = curr, acc), {})\n\n  const sortedGroups = (sorterEmployers: []) => {\n    if (sorterEmployers?.length > 0) {\n      return Object.keys(alphabet).reduce((acc: any, curr: any) => {\n        const children: any[] = []\n        sorterEmployers.map((elem: any) => {\n          if (elem.letter.indexOf(curr) !== -1) {\n            children.push(elem)\n          }\n          return acc[curr] = { children }\n        })\n        return acc\n      }, {})\n    }\n  }\n\n  const memoizedEmployees = useMemo(() => sorterEmployers?.length > 0 && sortedGroups(sorterEmployers), [sorterEmployers])\n\n  const sortedByMonth = (activeEmployers: any[] | undefined) => {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].reduce((acc, curr) => {\n      const employeesDob: { name: any; birthday: any }[] = []\n      // @ts-ignore\n      if(activeEmployers?.length > 0){\n        activeEmployers?.map(({ key, name, birthday,active }: any) => {\n          const month = new Date(birthday).getMonth() + 1\n          if (+curr === month) {\n            // @ts-ignore\n            employeesDob.push({ key, name, birthday,active })\n            // @ts-ignore\n            acc[curr] = { key: month, children: employeesDob }\n          }\n        })\n      }\n      return acc\n    }, {})\n  }\n\n  useMemo(() => setSortedActiveEmployees(sortedByMonth(activeEmployers)), [activeEmployers])\n\n  useEffect(() => {\n    localStorage.setItem('activeEmployers', JSON.stringify(sortedActiveEmployees))\n  }, [sortedActiveEmployees])\n\n\n  if (!requestEmployers) {\n    return (\n      <div id=\"page-loader\">\n        <p>Page is loading</p>\n      </div>\n    )\n  }\n\n\n  return (\n    <div className={'wrapper'}>\n      <h1>Employees</h1>\n      <div className={'employers'}>\n        <div className={'left-side'}>\n          {Object.keys(memoizedEmployees)?.map((letter) => {\n            return (\n              <Employers key={letter}\n                         activeEmployers={activeEmployers}\n                         setActiveEmployers={setActiveEmployers}\n                         sortedActiveEmployees={sortedActiveEmployees}\n                         letter={letter}\n                         children={memoizedEmployees[letter].children}/>\n            )\n          })}\n        </div>\n        <div className={'right-side'}>\n          <h2>Employers Birthday</h2>\n          {!sortedActiveEmployees || Object.keys(sortedActiveEmployees)?.length < 1 &&\n          <h3> Employees List is empty</h3>}\n          {Object.keys(sortedActiveEmployees)?.length > 0 && Object.keys(sortedActiveEmployees)?.sort((month): any => {\n            const currMonth = new Date().getMonth() + 1\n            if (+month <= currMonth) return -1\n            if (+month > currMonth) return 0\n          }).map((month) => {\n            const newMonth = new Date().setMonth(+month - 1)\n            // @ts-ignore\n            const children = sortedActiveEmployees[month].children\n            return (\n              <div key={month}>\n                <h3>{new Date(newMonth).toLocaleDateString('en-US', { month: 'long' })}</h3>\n                {children.map(({ name, birthday }: any) => (\n                  <p>{name} - {new Date(birthday).toLocaleDateString('pt-PT')}</p>\n                ))}\n              </div>\n            )\n          })\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default EmployeesPage\n","import { ActionType } from './model'\n\nexport const requestApiEmployees = () => ({\n  type: ActionType.GET_EMPLOYERS\n})\n","import { Route, Link } from 'react-router-dom'\nimport Home from './Home/index'\nimport Employees from './Employees/index'\nimport './App.scss'\n\nconst App = () => (\n  <div>\n    <header>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/employees\">Employees</Link>\n    </header>\n\n    <main>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/employees\" component={Employees} />\n    </main>\n  </div>\n)\n\nexport default App\n","import * as ReactDOM from 'react-dom'\nimport configureStore from './store/configureStore'\nimport {HashRouter} from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport App from './App'\n\nconst { store } = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}